/**
 ******************************************************************************
 * @file    main.c
 * @author  Ac6
 * @version V1.0
 * @date    01-December-2013
 * @brief   Default main function.
 ******************************************************************************
 */


#include "stm32f4xx.h"
#include "stm32f4_discovery.h"
int a=0,b,c;
//GPIO=======================================================================================================
void GPIO_out(){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
	GPIO_InitTypeDef GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12 | GPIO_Pin_13| GPIO_Pin_14| GPIO_Pin_15;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
	GPIO_Init(GPIOD, &GPIO_InitStructure);
}
void GPIO_out_on_off(){
	GPIO_SetBits(GPIOD, GPIO_Pin_12);
	for (int i=0;i<10000000;i++);
	GPIO_SetBits(GPIOD, GPIO_Pin_13);
	for (int i=0;i<10000000;i++);
	GPIO_SetBits(GPIOD, GPIO_Pin_14);
	for (int i=0;i<10000000;i++);
	GPIO_SetBits(GPIOD, GPIO_Pin_15);
	for (int i=0;i<10000000;i++);


	GPIO_ResetBits(GPIOD, GPIO_Pin_12);
	for (int i=0;i<10000000;i++);
	GPIO_ResetBits(GPIOD, GPIO_Pin_13);
	for (int i=0;i<10000000;i++);
	GPIO_ResetBits(GPIOD, GPIO_Pin_14);
	for (int i=0;i<10000000;i++);
	GPIO_ResetBits(GPIOD, GPIO_Pin_15);
	for (int i=0;i<10000000;i++);
}
void GPIO_in_up(){
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
	GPIO_InitTypeDef  GPIO_InitStructure;
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 | GPIO_Pin_2| GPIO_Pin_3;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN; //wejscie
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
	GPIO_Init(GPIOA, &GPIO_InitStructure);
}
void GPIO_read_imput_data(){
	if(!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		GPIO_SetBits(GPIOD, GPIO_Pin_12);
	}
	else
	{
		GPIO_ResetBits(GPIOD, GPIO_Pin_12);
	}
	if(!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2))
	{
		GPIO_SetBits(GPIOD, GPIO_Pin_13);
	}
	else
	{
		GPIO_ResetBits(GPIOD, GPIO_Pin_13);
	}
	if(!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_3))
	{
		GPIO_SetBits(GPIOD, GPIO_Pin_15);
	}
	else
	{
		GPIO_ResetBits(GPIOD, GPIO_Pin_15);
	}
}
void GPIO_zapalenie_gaszenie_jednym_przyciskiem(){

	if(a==0 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		GPIO_SetBits(GPIOD, GPIO_Pin_15);
		a = 1;
		for(int i=0; i<5000000;i++);
	}

	if(a==1 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		GPIO_ResetBits(GPIOD, GPIO_Pin_15);
		a = 0;
		for(int i=0; i<5000000;i++);
	}

	if(b==0 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2))
	{
		GPIO_SetBits(GPIOD, GPIO_Pin_14);
		b = 1;
		for(int i=0; i<5000000;i++);
	}

	if(b==1 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_2))
	{
		GPIO_ResetBits(GPIOD, GPIO_Pin_14);
		b = 0;
		for(int i=0; i<5000000;i++);
	}

	if(c==0 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_3))
	{
		GPIO_SetBits(GPIOD, GPIO_Pin_13);
		c = 1;
		for(int i=0; i<5000000;i++);
	}

	if(c==1 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_3))
	{
		GPIO_ResetBits(GPIOD, GPIO_Pin_13);
		c = 0;
		for(int i=0; i<5000000;i++);
	}



}
void GPIO_zapalanie_kolejnych_jednym_przyciskiem(){
	if(a==0 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		GPIO_SetBits(GPIOD, GPIO_Pin_15);
		a = 1;
		for(int i=0; i<5000000;i++);
	}

	if(a==1 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		GPIO_SetBits(GPIOD, GPIO_Pin_14);
		a = 2;
		for(int i=0; i<5000000;i++);
	}

	if(a==2 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		GPIO_SetBits(GPIOD, GPIO_Pin_13);
		a = 3;
		for(int i=0; i<5000000;i++);
	}

	if(a==3 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		GPIO_SetBits(GPIOD, GPIO_Pin_12);
		a = 4;
		for(int i=0; i<5000000;i++);
	}

	if(a==4 && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
		a = 0;
		for(int i=0; i<5000000;i++);
	}


}
void GPIO_przytrzymanie_zapala_kolejne(){

	if(a==0 &&  !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		for(int i=0; i<10000000;i++);
		GPIO_SetBits(GPIOD, GPIO_Pin_15);
		a = 1;
		for(int i=0; i<10000000;i++);
	}
	if(a==1  &&!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		for(int i=0; i<10000000;i++);
		GPIO_SetBits(GPIOD, GPIO_Pin_14);
		a = 2;
		for(int i=0; i<10000000;i++);
	}
	if(a==2  &&!GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		for(int i=0; i<10000000;i++);
		GPIO_SetBits(GPIOD, GPIO_Pin_13);
		a = 3;
		for(int i=0; i<10000000;i++);
	}
	if(a==3  && !GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		for(int i=0; i<10000000;i++);
		GPIO_SetBits(GPIOD, GPIO_Pin_12);
		a = 4;
		for(int i=0; i<10000000;i++);
	}
	if(a!=0 && GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1))
	{
		while(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_1));

		GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
		a = 0;
		for(int i=0; i<5000000;i++);
	}
}
//TIM========================================================================================================
void TIM_set(){
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
	TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
	TIM_TimeBaseStructure.TIM_Period = 4999;
	TIM_TimeBaseStructure.TIM_Prescaler = 9999;
	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
	TIM_Cmd(TIM3, ENABLE);
}
void TIM_obsluga_jego_przerwania(){
	if(TIM_GetFlagStatus(TIM3, TIM_FLAG_Update))
			{
				if(GPIO_ReadOutputDataBit(GPIOD, GPIO_Pin_12)==1)
				{
					GPIO_ResetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
				}else{
					GPIO_SetBits(GPIOD, GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | GPIO_Pin_15);
				}
				TIM_ClearFlag(TIM3, TIM_FLAG_Update);
			}

}
int main(void)
{
	GPIO_out();
	TIM_set();
	for(;;){
		TIM_obsluga_jego_przerwania();
	}
}
